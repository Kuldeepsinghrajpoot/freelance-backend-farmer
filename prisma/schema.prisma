datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  RAZORPAY
  CASH_ON_DELIVERY
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  email        String     @unique
  name         String?
  address      String?
  password     String?
  phone        String
  profile      String?
  role         Role       @default(USER)
  payments     Payment[]
  adminId      String?    @db.ObjectId
  Admin        Admin[]
  cart         Cart[]
  wishlist     Wishlist[]
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Address      Address[]
  accessToken  String?
  resetToken   String?
  refreshToken String?
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  phone     String?
  password  String
  profile   String?
  address   String?
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  published Boolean       @default(false)
  title     String
  authorId  String        @db.ObjectId
  author    User?         @relation(fields: [authorId], references: [id])
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  Order     Order[]
  price    Float
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       String
  description String
  image       String
  stock       String?     @default("0")
  category    String?
  rating      String?     @default("0")
  reviews     Review[]
  published   Boolean?    @default(false)
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime    @updatedAt
  Cart        Cart[]
  Wishlist    Wishlist[]
  OrderItem   OrderItem[]
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  User      User        @relation(fields: [userId], references: [id])
  paymentId String?     @db.ObjectId
  Payment   Payment?    @relation(fields: [paymentId], references: [id])
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  Order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  Product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  Product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
